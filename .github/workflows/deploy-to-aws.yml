name: Deploy to AWS

on:
  push:
    branches:
      - main  # 只在 main 分支推送时触发

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.AWS_SSH_KEY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

    - name: Deploy to AWS
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} << 'EOF'
        # 创建部署目录（如果不存在）
        sudo mkdir -p /var/www/web-ai-translator
        cd /var/www/web-ai-translator
        
        if [ ! -d .git ]; then
          git init
          git remote add origin git@github.com:youxingxiang/web-ai-translator.git
        fi
        
        # 拉取最新代码
        git fetch origin main
        git reset --hard origin/main
        
        # 检查是否存在 go.mod 文件
        if [ -f "go.mod" ]; then
          echo "安装Go依赖..."
          go mod download || echo "注意: 没有依赖需要下载或已经下载过"
          echo "初始化Go模块..."
          go mod tidy || echo "go mod tidy 失败，但继续执行"
        else
          echo "警告: 未找到go.mod文件，跳过依赖安装"
          echo "尝试初始化模块..."
          go mod init github.com/youxingxiang/web-ai-translator || echo "无法初始化模块，继续执行"
        fi
        
        echo "构建Go应用..."
        go build -o translator || { echo "构建失败"; exit 1; }
        
        # 停止现有服务（如果存在）
        sudo systemctl stop translator.service || echo "服务未运行或不存在，继续执行"
        
        # 创建或更新systemd服务配置
        sudo tee /etc/systemd/system/translator.service > /dev/null << 'EOSVC'
        [Unit]
        Description=Translator Service
        After=network.target

        [Service]
        User=${{ secrets.AWS_USER }}
        WorkingDirectory=/var/www/web-ai-translator
        ExecStart=/var/www/web-ai-translator/translator
        Restart=always
        RestartSec=5
        # 如果您的Go应用需要特定环境变量，可以在这里添加
        # Environment=KEY=value

        [Install]
        WantedBy=multi-user.target
        EOSVC
        
        # 创建Nginx配置
        sudo tee /etc/nginx/sites-available/web-ai-translator.conf > /dev/null << 'EONGINX'
        server {
            listen 8080;
            server_name _;  # 匹配所有域名，您也可以设置为特定域名
            
            location / {
                proxy_pass http://localhost:8080;  # 假设Go服务运行在8080端口，请根据实际情况调整
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
            }

            # 添加安全性相关配置
            # 隐藏Nginx版本信息
            server_tokens off;
            
            # 防止点击劫持
            add_header X-Frame-Options "SAMEORIGIN";
            
            # 启用XSS过滤
            add_header X-XSS-Protection "1; mode=block";
        }
        EONGINX
        
        # 删除默认站点（可选）
        sudo rm -f /etc/nginx/sites-enabled/default
        
        # 启用站点配置
        sudo ln -sf /etc/nginx/sites-available/web-ai-translator.conf /etc/nginx/sites-enabled/
        
        # 检查Nginx配置
        sudo nginx -t || { echo "Nginx配置错误"; exit 1; }
        
        # 重新加载systemd配置
        sudo systemctl daemon-reload
        
        # 启动服务并设置开机自启
        sudo systemctl start translator.service || { echo "服务启动失败"; exit 1; }
        sudo systemctl enable translator.service
        
        # 重启Nginx
        sudo systemctl restart nginx || { echo "Nginx重启失败"; exit 1; }
        
        # 设置文件权限
        sudo chown -R ubuntu:www-data /var/www/web-ai-translator/
        
        # 验证服务是否正在运行
        if systemctl is-active --quiet translator.service; then
          echo "部署成功完成！服务已启动并运行中。"
        else
          echo "警告：服务未能正常启动，请检查日志。"
          journalctl -u translator.service -n 20
        fi
        EOF
